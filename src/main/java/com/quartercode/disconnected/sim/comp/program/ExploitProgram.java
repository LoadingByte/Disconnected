/*
 * This file is part of Disconnected.
 * Copyright (c) 2013 QuarterCode <http://www.quartercode.com/>
 *
 * Disconnected is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Disconnected is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Disconnected. If not, see <http://www.gnu.org/licenses/>.
 */

package com.quartercode.disconnected.sim.comp.program;

import java.util.List;
import java.util.Map;
import com.quartercode.disconnected.Disconnected;
import com.quartercode.disconnected.sim.Simulation;
import com.quartercode.disconnected.sim.comp.Version;
import com.quartercode.disconnected.sim.comp.Vulnerability;
import com.quartercode.disconnected.sim.comp.attack.Exploit;
import com.quartercode.disconnected.sim.comp.attack.Payload;
import com.quartercode.disconnected.sim.comp.program.Process.ProcessState;
import com.quartercode.disconnected.sim.member.Member;
import com.quartercode.disconnected.sim.run.util.ScriptExecutor;
import com.quartercode.disconnected.util.ProbabilityUtil;
import com.quartercode.disconnected.util.size.ByteUnit;

/**
 * The exploit program can execute exploits against vulnerable systems.
 * 
 * @see Exploit
 * @see Payload
 */
public class ExploitProgram extends Program {

    /**
     * Creates a new empty exploit program.
     * This is only recommended for direct field access (e.g. for serialization).
     */
    protected ExploitProgram() {

    }

    /**
     * Creates a new exploit program and sets the name, the version and the vulnerabilities.
     * 
     * @param name The name the program has.
     * @param version The current version the program has.
     * @param vulnerabilities The vulnerabilities the program has.
     */
    public ExploitProgram(String name, Version version, List<Vulnerability> vulnerabilities) {

        super(name, version, vulnerabilities);
    }

    @Override
    protected void addParameters() {

        addParameter("target", Member.class);
        addParameter("exploit", Exploit.class);
        addParameter("payload", Payload.class);
    }

    @Override
    public long getSize() {

        return ByteUnit.BYTE.convert(20, ByteUnit.KILOBYTE);
    }

    @Override
    protected ProgramExecutor createExecutorInstance(Process host, Map<String, Object> arguments) {

        final Member target = (Member) arguments.get("target");
        final Exploit exploit = (Exploit) arguments.get("exploit");
        final Payload payload = (Payload) arguments.get("payload");

        return new ProgramExecutor(host) {

            @Override
            public void update() {

                // This should only send the exploit and wait for the payload!
                // The removal of members etc. is only temp and programmed using a workaround.
                // This executes the consequences of the attack because it isn't implemented yet!

                Simulation simulation = Disconnected.getSimulation();
                Member attacker = simulation.getMember(getHost().getHost().getHost());

                // Execute the exploit (TEMP)
                simulation.getGroup(attacker).getReputation(attacker).addValue(5);
                ScriptExecutor.execute(exploit.getVulnerability().getScripts(), simulation, target, attacker);

                // Calculate the success (of course, this is not final)
                if (ProbabilityUtil.gen(0.2F, simulation.RANDOM)) {
                    // Execute the payload (TEMP)
                    simulation.getGroup(target).getReputation(attacker).subtractValue(10);
                    ScriptExecutor.execute(payload.getScripts(), simulation, target, attacker);
                }

                // End the program (because there's no payload yet)
                getHost().interrupt(true);

                if (getHost().getState() == ProcessState.INTERRUPTED) {
                    getHost().stop(false);
                }
            }
        };
    }

}
