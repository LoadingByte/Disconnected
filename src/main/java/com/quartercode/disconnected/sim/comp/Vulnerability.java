/*
 * This file is part of Disconnected.
 * Copyright (c) 2013 QuarterCode <http://www.quartercode.com/>
 *
 * Disconnected is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Disconnected is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Disconnected. If not, see <http://www.gnu.org/licenses/>.
 */

package com.quartercode.disconnected.sim.comp;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.xml.bind.annotation.XmlElement;
import com.quartercode.disconnected.util.InfoString;

/**
 * This class defines a vulnerability a computer part may have.
 * A vulnerability can be exploited to execute a payload which can open a session, change some parameters of the target computer etc.
 * 
 * @see Vulnerable
 * @see ComputerPart
 * @see Computer
 */
public class Vulnerability implements InfoString {

    @XmlElement
    private String       name;
    @XmlElement (name = "script")
    private List<String> scripts;

    /**
     * Creates a new empty vulnerability.
     * This is only recommended for direct field access (e.g. for serialization).
     */
    protected Vulnerability() {

    }

    /**
     * Creates a new vulnerability and sets the name, the computer part which has it and some scripts which define what happens while exploiting.
     * 
     * @param name The name of the vulnerability.
     * @param scripts Some scripts which define what happens while exploiting the vulnerability.
     */
    public Vulnerability(String name, List<String> scripts) {

        this.name = name;
        this.scripts = scripts == null ? new ArrayList<String>() : scripts;
    }

    /**
     * Returns the name of the vulnerability.
     * 
     * @return The name of the vulnerability.
     */
    public String getName() {

        return name;
    }

    /**
     * Returns the scripts which define what happens while exploiting the vulnerability.
     * 
     * @return The scripts which define what happens while exploiting the vulnerability.
     */
    public List<String> getScripts() {

        return Collections.unmodifiableList(scripts);
    }

    @Override
    public int hashCode() {

        final int prime = 31;
        int result = 1;
        result = prime * result + ( (name == null) ? 0 : name.hashCode());
        result = prime * result + ( (scripts == null) ? 0 : scripts.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {

        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Vulnerability other = (Vulnerability) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        if (scripts == null) {
            if (other.scripts != null)
                return false;
        } else if (!scripts.equals(other.scripts))
            return false;
        return true;
    }

    @Override
    public String toInfoString() {

        return "vuln " + name + ", " + scripts.size() + " scripts";
    }

    @Override
    public String toString() {

        return getClass().getName() + " [" + toInfoString() + "]";
    }

    /**
     * This interface defines a vulnerable class which can be attacked by exploiting existing vulnerabilities.
     * 
     * @see Vulnerability
     */
    public static interface Vulnerable {

        /**
         * Returns the vulnerabilities an instance of the implementating class has.
         * 
         * @return The vulnerabilities an instance of the implementating class part has.
         */
        public List<Vulnerability> getVulnerabilities();

    }

}
