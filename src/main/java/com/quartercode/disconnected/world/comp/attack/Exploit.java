/*
 * This file is part of Disconnected.
 * Copyright (c) 2013 QuarterCode <http://www.quartercode.com/>
 *
 * Disconnected is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Disconnected is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Disconnected. If not, see <http://www.gnu.org/licenses/>.
 */

package com.quartercode.disconnected.world.comp.attack;

import com.quartercode.classmod.base.FeatureDefinition;
import com.quartercode.classmod.base.def.DefaultFeatureHolder;
import com.quartercode.classmod.extra.FunctionDefinition;
import com.quartercode.classmod.extra.def.LockableFEWrapper;
import com.quartercode.classmod.extra.def.ReferenceProperty;
import com.quartercode.classmod.util.FunctionDefinitionFactory;
import com.quartercode.classmod.util.PropertyAccessorFactory;
import com.quartercode.disconnected.world.comp.Vulnerability;

/**
 * This class represents a written exploit which can exploit a given {@link Vulnerability}.
 * An exploit can execute a {@link Payload} after exploiting the {@link Vulnerability}.
 * 
 * @see Vulnerability
 * @see Payload
 */
public class Exploit extends DefaultFeatureHolder {

    // ----- Properties -----

    /**
     * The {@link Vulnerability} which is used by the exploit for executing a {@link Payload}.
     */
    protected static final FeatureDefinition<ReferenceProperty<Vulnerability>> VULNERABILITY;

    static {

        VULNERABILITY = ReferenceProperty.createDefinition("vulnerability");

    }

    // ----- Properties End -----

    // ----- Functions -----

    /**
     * Returns the {@link Vulnerability} which is used by the exploit for executing a {@link Payload}.
     */
    public static final FunctionDefinition<Vulnerability>                      GET_VULNERABILITY;

    /**
     * Changes the {@link Vulnerability} which is used by the exploit for executing a {@link Payload}.
     * 
     * <table>
     * <tr>
     * <th>Index</th>
     * <th>Type</th>
     * <th>Parameter</th>
     * <th>Description</th>
     * </tr>
     * <tr>
     * <td>0</td>
     * <td>{@link Vulnerability}</td>
     * <td>vulnerability</td>
     * <td>The new {@link Vulnerability} the exploit uses.</td>
     * </tr>
     * </table>
     */
    public static final FunctionDefinition<Void>                               SET_VULNERABILITY;

    static {

        GET_VULNERABILITY = FunctionDefinitionFactory.create("getVulnerability", Exploit.class, PropertyAccessorFactory.createGet(VULNERABILITY));
        SET_VULNERABILITY = FunctionDefinitionFactory.create("setVulnerability", Exploit.class, new LockableFEWrapper<Void>(PropertyAccessorFactory.createSet(VULNERABILITY)), Vulnerability.class);

    }

    // ----- Functions End -----

    /**
     * Creates a new exploit object.
     */
    public Exploit() {

    }

}
