/*
 * This file is part of Disconnected.
 * Copyright (c) 2013 QuarterCode <http://quartercode.com/>
 *
 * Disconnected is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Disconnected is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Disconnected. If not, see <http://www.gnu.org/licenses/>.
 */

package com.quartercode.disconnected.server.test.world.comp.vuln;

import static com.quartercode.disconnected.server.test.ExtraAssert.assertCollectionEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.jmock.integration.junit4.JUnitRuleMockery;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import com.quartercode.disconnected.server.registry.VulnSource;
import com.quartercode.disconnected.server.registry.VulnSource.Action;
import com.quartercode.disconnected.server.world.comp.vuln.Attack;
import com.quartercode.disconnected.server.world.comp.vuln.Vulnerability;
import com.quartercode.disconnected.server.world.comp.vuln.VulnerabilityAction;
import com.quartercode.disconnected.server.world.comp.vuln.VulnerabilityContainer;

public class VulnerabilityContainerTest {

    @Rule
    public JUnitRuleMockery        context = new JUnitRuleMockery();

    private VulnerabilityContainer container;

    @Before
    public void setUp() {

        container = new VulnerabilityContainer();
    }

    @Test
    public void testGenerateVuln() {

        assertTrue("Empty vulnerability container is not empty", container.getVulnerabilities().isEmpty());

        List<Action> actions = new ArrayList<>();
        actions.add(new Action("action1", 0, 1));
        actions.add(new Action("action2", 1, 1));
        actions.add(new Action("action3", 0, 1));
        actions.add(new Action("action4", 1, 1));
        final VulnSource vulnSource = new VulnSource("testVulnSource", null, 1, actions);

        container.generateVulnerability(vulnSource);

        assertEquals("Amount of vulns after generation", 1, container.getVulnerabilities().size());

        Vulnerability generatedVuln = container.getVulnerabilities().get(0);
        assertCollectionEquals("Wrong actions in generated vuln", generatedVuln.getActions(), action("action2"), action("action4"));
    }

    @Test
    public void testGenerateVulns() {

        assertTrue("'Empty' vulnerability container is not empty", container.getVulnerabilities().isEmpty());

        VulnSource vulnSource1 = new VulnSource("testVulnSource1", null, 0, Collections.<Action> emptyList());
        final VulnSource vulnSource2 = new VulnSource("testVulnSource2", null, 1, Arrays.asList(new Action("action2", 1, 1)));
        VulnSource vulnSource3 = new VulnSource("testVulnSource3", null, 0, Collections.<Action> emptyList());

        container.generateVulnerabilities(Arrays.asList(vulnSource1, vulnSource2, vulnSource3), 2);

        assertEquals("Amount of vulns after generation", 2, container.getVulnerabilities().size());

        Vulnerability generatedVuln1 = container.getVulnerabilities().get(0);
        assertCollectionEquals("Actions of first generated vuln are wrong", generatedVuln1.getActions(), action("action2"));

        Vulnerability generatedVuln2 = container.getVulnerabilities().get(1);
        assertCollectionEquals("Actions of first generated vuln are wrong", generatedVuln2.getActions(), action("action2"));
    }

    @Test
    public void testProcessAttack() {

        Vulnerability vuln1 = vuln(action("testAction1"));
        Vulnerability vuln2 = vuln(action("testAction2"));
        Vulnerability vuln3 = vuln(action("testAction3"));

        container.addVulnerability(vuln1);
        container.addVulnerability(vuln2);
        // Do not add vuln3

        String action1 = container.processAttack(new Attack(vuln1, "testAction1"));
        String action2 = container.processAttack(new Attack(vuln2, "testAction2"));
        String action3 = container.processAttack(new Attack(vuln3, "testAction3"));

        assertEquals("Action for vuln 1", "testAction1", action1);
        assertEquals("Action for vuln 2", "testAction2", action2);
        assertEquals("Action for vuln 3 (not added to container)", "null", action3);
    }

    private Vulnerability vuln(VulnerabilityAction... actions) {

        return new Vulnerability(Arrays.asList(actions));
    }

    private VulnerabilityAction action(String name) {

        return new VulnerabilityAction(name, 1);
    }

}
